/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PositionalAudio } from '@react-three/drei'
import type { GLTF } from 'three-stdlib'

import debounce from 'lodash-es/debounce'
import clamp from 'lodash-es/clamp'
import { forwardRef, useCallback, useEffect, useLayoutEffect } from 'react'
import { useBox } from '@react-three/cannon'
import { useFrame } from '@react-three/fiber'

import type { PropsWithChildren } from 'react'
import type { BoxProps } from '@react-three/cannon'
import type { Group, PositionalAudio as PositionalAudioImpl } from 'three'
import type { CollideEvent } from '@react-three/cannon'

import { getState, setState, mutation, useStore } from '../../store'

type GLTFResult = GLTF & {
  nodes: {
    boot002_0001: THREE.Mesh
    boot002_0001_1: THREE.Mesh
    boot002_0001_2: THREE.Mesh
    boot002_0001_3: THREE.Mesh
    boot002_0001_4: THREE.Mesh
    boot002_0001_5: THREE.Mesh
    boot002_0001_6: THREE.Mesh
    boot002_0001_7: THREE.Mesh
    boot002_0001_8: THREE.Mesh
  }
  materials: {
    ['paint.001']: THREE.MeshStandardMaterial
    ['full_black.001']: THREE.MeshStandardMaterial
    ['tex_shiny.001']: THREE.MeshPhysicalMaterial
    ['window.001']: THREE.MeshPhysicalMaterial
    ['logo.001']: THREE.MeshStandardMaterial
    ['silver.001']: THREE.MeshPhysicalMaterial
    ['plastic.001']: THREE.MeshStandardMaterial
    ['lights.001']: THREE.MeshStandardMaterial
    ['glass.001']: THREE.MeshPhysicalMaterial
  }
}

const v = new THREE.Vector3()
const maxDownForce = 3

export const PorscheChassis = forwardRef<Group, PropsWithChildren<BoxProps>>(({ args = [1.7, 0.55, 5.2], mass = 1493, children, ...props }, ref) => {
  const { nodes, materials } = useGLTF('models/porsche.glb') as GLTFResult

  const crashAudio = useRef<PositionalAudioImpl>(null!)
  const [maxSpeed] = useStore((s) => [s.vehicleConfig.maxSpeed])
  const [, api] = useBox(() => ({ mass, args, allowSleep: false, onCollide, ...props }), ref)

  const onCollide = useCallback(
    debounce<(e: CollideEvent) => void>((e) => {
      if (e.body.userData.trigger || !getState().sound || !crashAudio.current) return
      crashAudio.current.setVolume(clamp(e.contact.impactVelocity / 10, 0.2, 0.5))
      if (!crashAudio.current.isPlaying) crashAudio.current.play()
    }, 200),
    [],
  )

  useEffect(() => {
    setState({ api })
    return () => setState({ api: null })
  }, [api])

  useLayoutEffect(
    () =>
      api.velocity.subscribe((velocity) => {
        const speed = v.set(...velocity).length()
        // const gearPosition = speed / (maxSpeed / gears)
        // const rpmTarget = Math.max(((gearPosition % 1) + Math.log(gearPosition)) / 2, 0)
        const downForce = (-9.81 * (speed / maxSpeed) * maxDownForce + 1) * 1000
        Object.assign(mutation, { downForce, speed, velocity })
      }),
    [maxSpeed],
  )

  useFrame(() => {
    api.applyForce([0, mutation.downForce, 0], [0, 0, 0]) // downforce
  })
  return (
    <group ref={ref} dispose={null}>
      <group position={[0, -0.2, 0]} scale={0.65}>
        <mesh castShadow geometry={nodes.boot002_0001.geometry} material={materials['paint.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_1.geometry} material={materials['full_black.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_2.geometry} material={materials['tex_shiny.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_3.geometry} material={materials['window.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_4.geometry} material={materials['logo.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_5.geometry} material={materials['silver.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_6.geometry} material={materials['plastic.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_7.geometry} material={materials['lights.001']} />
        <mesh castShadow geometry={nodes.boot002_0001_8.geometry} material={materials['glass.001']} />
      </group>
      {children}
      <PositionalAudio ref={crashAudio} url="/sounds/crash.mp3" loop={false} distance={5} />
    </group>
  )
})

useGLTF.preload('models/porsche.glb')
